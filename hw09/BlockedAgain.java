/*Below, you will be adding methods to the BlockedAgain class.  
First, add the method getInt(), which, when called in the main method, will req
uest input from the user and solve [problem A] by calling methods checkInt() and
checkRange().  getInt() continues to request input from the user until acceptable
input is provided.  Next, add the method checkint(), which, when called by getInt(), 
will accept inputs of your choice and test whether the user’s input is an integer 
(hint: use a scanner method), solving [problem A1].  Finally, implement the method 
checkRange(), which, when called by getInt(), will accept inputs of your choice 
and test whether the user’s input is within range 1-9 inclusive, solving 
[problem A2]. We suggest checkInt() return boolean and checkRange return type int.
Now that acceptable input has been gathered, it is time to solve [problem B] and 
its subproblems.  First, implement the method allBlocks(int x), which, as seen 
in the main method, will accept the integer generated by getInt() and solve 
[problem B] by calling a method called block().  Next, implement the method 
block(), which, when called in allBlocks(), will accept input variables of your 
choice and solve [problem B1] by calling a method called line().  Finally, 
implement the method line(), which will accept input variables of your choice 
from block() and solve [problem B1a].*/

//Huahao Luo
//Lehigh ID: hul214
//Course: CSE 2
//HW09 Program: BlockedAgain


import java.util.Scanner;
public class BlockedAgain
{
    public static void main(String []s)
    {
        int m;
        //force user to enter int in range 1-9, inclusive.
        m = getInt(); 
        allBlocks(m);
    }//this is the main program
    
    public static int getInt()//make sure we would have the disired input
    {
        int x=0;
        int m=0;
        Scanner myScanner;
        System.out.print("Please enter an integer from 1 to 9: ");//prompt the user to enter input
        
        while(x==0||m==0)
        {
            myScanner= new Scanner(System.in);
            x =checkInt(myScanner);
            m = checkRange(myScanner, x);
        
            if(x==0)
            {
                System.out.print("You did not enter an int; try again:");//error message
            }
            if(x!=0&&m==0)
            {
                System.out.print("You did not enter an int in [1,9]; try again:");//error message
            }

        }
        return m;
        
    }
    
    public static int checkInt (Scanner myScanner)//this is the method of checking if the input is int
    {
        int x=0;
        if(myScanner.hasNextInt()) 
        {
            x=myScanner.nextInt();
        }//make sure user enter an int
        return x;
    }
    
    public static int checkRange (Scanner myScanner, int x)//checking if it's within the range
    {
        int m=0;
        if(x>=1&&x<=9)
        {
            m=x;
        }
        return m;
    }
    
    public static String allBlocks (int m)//print out the stack
    {
        int y=m;
        String Vblock="-";
        String Vspace="";
        int VPrintNumber=1;
        int PrintCount=1;
        int i=0, j=0, k=0, l=0;
        
        while(i<m)
        {
            block(y,VPrintNumber,PrintCount,Vblock,Vspace);
            i++;
            VPrintNumber+=1;
            PrintCount+=2;
            y--;
            Vspace="";
            Vblock+="--";
        }
        return Vblock;
    }
    
    public static String block(int y, int VPrintNumber, int PrintCount, String Vblock, String Vspace)//print out the stack
    {
        int j=0;
        
        while(j<VPrintNumber)
        {
            line(y,Vspace,PrintCount,VPrintNumber);
            j++;
        }
        space(y,Vspace);
        System.out.println(Vblock);
        return Vblock;
    }
    
    public static int line(int y, String Vspace, int PrintCount, int VPrintNumber)//print out each line
    {
        space(y,Vspace);
        num(PrintCount,VPrintNumber);
        return y;
    }
    
    public static String space(int y,String Vspace)//this will print out the space before the number
    {
        int l=0;
        while(l<y)
        {
            Vspace+=" ";
            l++;
        }
        System.out.print(Vspace);
        return Vspace;
    }
    
    public static int num(int PrintCount, int VPrintNumber)//this will print out the number of the stack
    {
        int k=0;
        while(k<PrintCount)
        {
            System.out.print(VPrintNumber);
            k++;
        }
        System.out.println("");
        return k;
    }

}